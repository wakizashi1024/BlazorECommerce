@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if(product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </div>
        <div class="media-body">
            <div class="media-body-header">
                <h2 class="mb-0">@product.Title</h2>
                <p>@product.Description</p>
                @* $@product.Price *@
            </div>
        @if (currentVariant is not null)
        {
            <div class="media-body-footer">
                <div class="mb-3">
                    <label for="input-product-type">Product type:</label>
                    <select id="input-product-type" class="form-select" @bind="currentTypeId">
                    @foreach(var variant in product.Variants)
                    {
                        <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                    }
                    </select>
                </div>
                <div class="price-actions-area">
                    <div class="price-area">
                    @if (currentVariant.OriginalPrice > currentVariant.Price)
                    {
                        <h6 class="text-muted original-price">
                            $@currentVariant.OriginalPrice
                        </h6>
                    }
                        <h4 class="price">
                            $@currentVariant.Price
                        </h4>
                    </div>
                    <div class="actions-area">
                        <button class="btn btn-primary" @onclick="@AddToCart">
                            <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;AddToCart
                        </button>
                    </div>
                </div>
            </div>
        }
        </div>
    </div>
}

@code {
    private Product? product = null;
    private string message = "Loading product...";
    private int _currentTypeId = 1;
    public int currentTypeId
    {
        get => _currentTypeId;
        set
        {
            _currentTypeId = value;
            currentVariant = GetSelectedVariant();
        }
    }
    private ProductVariant? currentVariant = null;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // product = ProductService.Products.FirstOrDefault(p => p.Id == Id);
        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product is not null && product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
                // currentVariant = GetSelectedVariant();
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product?.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);

        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
        {
            ProductId = productVariant.ProductId,
            ProductTypeId = productVariant.ProductTypeId,
        };
        await CartService.AddToCart(cartItem);
    }
}
