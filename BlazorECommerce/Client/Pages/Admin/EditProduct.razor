@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

@if (loading)
{
    <span>@message</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new product</h3>
    }

    <EditForm Model="@product" OnValidSubmit="@CreateOrUpdateProduct">
        <DataAnnotationsValidator />
        <div class="input-group mb-2">
            <label class="input-group-text" for="title">Title</label>
            <InputText id="title" class="form-control" type="text" aria-label="title" @bind-Value="@product.Title" />
        </div>
        <ValidationMessage For="@(() => product.Title)" />

        <div class="input-group mb-2">
            <label class="input-group-text" for="imageUrl">Image Url</label>
            <InputText id="image-url" class="form-control" type="text" aria-label="image-url" @bind-Value="@product.ImageUrl" />
        </div>
        <ValidationMessage For="@(() => product.ImageUrl)" />

        <div class="input-group mb-2">
            <label class="input-group-text" for="description">Description</label>
            <InputTextArea id="description" class="form-control" type="text" aria-label="description" @bind-Value="@product.Description" />
        </div>
        <ValidationMessage For="@(() => product.Description)" />
        <hr />

        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect class="form-control" disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId">
                    @foreach (var productType in ProductTypeService.ProductTypes)
                    {
                        <option value="@($"{productType.Id}")">@productType.Name</option>
                    }
                    </InputSelect>
                </div>

                <div class="col">
                    <InputNumber @bind-Value="@variant.Price" class="form-control" disabled="@variant.Deleted" />
                </div>

                <div class="col">
                    <InputNumber @bind-Value="@variant.OriginalPrice" class="form-control" disabled="@variant.Deleted" />
                </div>

                <div class="col col-visible">
                    <InputCheckbox @bind-Value="@variant.Visible" style="transform: scale(1.5, 1.5)" disabled="@variant.Deleted" />
                </div>

                <div class="col">
                    <button class="btn btn-primary" type="button" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button class="btn btn-primary" type="button" @onclick="@GenNewVariant">
            <i class="oi oi-plus"></i>&nbsp;Add variant
        </button>
        <hr />

        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" class="form-control" for="category" @bind-Value="@product.CategoryId">
            @foreach (var category in CategoryService.AdminCategories)
            {
                <option value="@category.Id">@category.Name</option>
            }
            </InputSelect>
        </div>
        <hr />

        <div class="form-check">
            <InputCheckbox id="featured" class="form-check-input" @bind-Value="@product.Featured"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" class="form-check-input" @bind-Value="@product.Visible"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />

        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary />
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Product product = null;
    private bool loading = true;
    private string btnText = "";
    private string message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product
            {
                IsNew = true,
            };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct is null)
            {
                message = $"Product with Id '{Id}' does not exist!";

                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void GenNewVariant()
    {
        product.Variants
            .Add(new ProductVariant
                {
                    IsNew = true,
                    ProductId = product.Id,
                });
    }

    async void CreateOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }
}
