@inject IProductService ProductService
@implements IDisposable 

<ul class="list-unstyled">
@if (!isLoading && ProductService.Products is not null)
{
    if (ProductService.Products.Count == 0)
    {
        <li>All products has been sold out, comeback later.</li>
    }
    else
    {

        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="@($"/product/{product.Id}")">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                        <a href="@($"/product/{product.Id}")">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @* $@product.Price *@
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    }
}
else
{
    <li>Loading...</li>
}
</ul>

@code {
    [Parameter]
    public bool isLoading { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     await ProductService.GetProducts();
    // }

    protected override void OnInitialized()
    {
        // ProductService.ProductsChanged += StateHasChanged;
    }

    // protected override void OnParametersSet()
    // {
    //     Console.WriteLine(isLoading);
    // }

    public void Dispose()
    {
        // ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        } 
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);

        return $"${minPrice} up";
    }
}
