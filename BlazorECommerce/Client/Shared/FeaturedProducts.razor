@inject IProductService ProductService
@implements IDisposable

<div class="text-center">
    <h2>Top Products of Today</h2>
</div>
@if (isLoading is not null && isLoading == true)
{
    <li>Loading...</li>
}
else if (ProductService.Products is null || ProductService.Products.Count == 0)
{
    <div class="text-center"> 
    @if (isLoading is null)
    {
        <span>@ProductService.Message</span>
    }
    else
    {
        <span>There is no any product here.</span>
    }
    </div>
}
else
{
    <div class="container">
    @foreach (var product in ProductService.Products)
    {
        @if (product.Featured)
        {
            <div class="featured-product">
                <div>
                    <a href="@($"/product/{product.Id}")">
                        <img src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <h4><a href="@($"/product/{product.Id}")">@product.Title</a></h4>
                <h5 class="price">
                    @* $@product.Price *@
                    @GetPriceText(product)
                </h5>
            </div>
        }
    }
    </div>
}

@code {
    [Parameter]
    public bool? isLoading { get; set; } = null;

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);

        return $"${minPrice} up";
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}